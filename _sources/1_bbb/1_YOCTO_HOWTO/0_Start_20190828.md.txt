# Start Yocto with Beaglebone Black


## Introduction
이 문서에서는 Yocto 를 이용하여 BSP를 구성 및 빌드한 후 이를 Beaglebone Black 보드에 올려 테스트하는 방법을 다룬다. 

이 문서는, [Bootlin](https://bootlin.com/)의 [Yocto Project  and OpenEmbedded development course 의 자료](https://bootlin.com/doc/training/yocto/)를 참고하여 작성하였다. 자세한 설명은 자료를 참고하는 것을 추천한다.

## 개발 환경 
- Linux Mint 19.1 (Yocto는 Ubuntu를 권장한다.)

## Setup

본적적인 작업을 시작하기 전 작업 디렉토리를 다음과 같이 생성한다.
```bash
$ cd $HOME && mkdir yocto-labs
```

다음으로, Yocto 를 사용하기 위한 필수 패키지들을 설치한다.

```bash
$ cd $HOME/yocto-labs
$ sudo apt install bc build-essential chrpath cpio diffstat gawk git python texinfo wget
```

마지막으로 본 예제에서 사용할 몇 가지 패치 및 도구들이 포함되어 있는 패키지를 다운받고, 압축을 해제한다.

```bash
$ cd
$ wget https://bootlin.com/doc/training/yocto/yocto-labs.tar.xz
$ tar xvf yocto-labs.tar.xz
```

## Download Yocto

### Download Yocto & Poky
Yocto로 BSP만들기 위해서는 Yocto에 포함된 빌드 시스템과 이를 이용하여 Rootfs / Linux Kernel / Boot Loader 및 User Application 등을 만드는 여러 개의 Layer 가 필요하다. 이 중에서 User Application 이나 Linux Kernel 등 대부분의 Layer들은 제품을 만드는 개발자들이 구성하지만, 그 기반이 되는 대부분의 라이브러리나 유틸리티 (glibc/systemd/tar/등..) 들은 비슷비슷하기 때문에 Yocto는 이런 공통적인 항목들을 모아서 Poky라고 불리우는 Reference System을 하나의 Layer로서 제공한다. 

즉 개발자들은 Poky에 원하는 Layer들이나 Recipe들을 넣거나 빼면서 자신만의 BSP를 구성할 수 있다. Poky는 Yocto 를 다운로드 받을 시 함께 포함되어 받을 수 있다. 

이 글을 시점에 Yocto는 THUD 2.6.1 버전까지 나와 있지만, 이 문서에서는 SUMO-19.0.0 버전을 사용한다. 다음과 같이 Yocto를 다운로드 받고, 필요한 패치를 적용하자.
```bash 
$ cd $HOME/yocto-labs
$ git clone git://git.yoctoproject.org/poky.git
$ cd $HOME/yocto-labs/poky
$ git checkout -b sumo-19.0.0 sumo-19.0.0
$ git am $HOME/yocto-labs/bootlin-lab-data/$ 0001-bblayers-do-not-include-meta-yocto-bsp.patch
```

### Download meta-ti

Poky는 Linux 상에서 동작하는 라이브러리나 유틸리티 등을 묶어놓은 Layer이기 때문에 실제 보드에서 이를 동작시키기 위한 Boot Loader 나 Linux Kernel등은 따로 Layer를 구성해 주어야 한다. 

이 글에서 사용하는 보드인 Beaglebone Black는 TI의 AM335x SoC가 탑재되어 있고, TI 에서는 meta-ti 라는 레이어에서 이 SoC를 위한 Layer를 제공한다.  다음과 같이 다운로드 후 필요한 패치들을 적용시키자.

``` bash
$ cd $HOME/yocto-labs
$ git clone git://git.yoctoproject.org/meta-ti.git
$ cd $HOME/yocto-labs/meta-ti
$ git checkout -b sumo ti2018.02
$ git am $HOME/yocto-labs/bootlin-lab-data/$ 0001-Simplify-linux-ti-staging-recipe.patch
$ git am $HOME/yocto-labs/bootlin-lab-data/$ 0002-do-not-use-base_read_file.patch
$ git am $HOME/yocto-labs/bootlin-lab-data/$ 0003-recipes-bsp-u-boot-fix-non-booting-U-Boot.patch
$ git am $HOME/yocto-labs/bootlin-lab-data/0004-fix-bitbake-warnings.patch
```

## Set up the build environment

이제 필요한 파일들은 모두 다운로드 받았으니 빌드를 진행해 보자. 먼저, 다음과 같은 명령으로 Yocto Build에 필요한 환경 변수들을 설정해 주자.

```bash
$ cd $HOME/yocto-labs
$ source poky/oe-init-build-env
```

위 명령을 수행하면 *$HOME/yocto-labs/build* 라는 디렉토리로 현재 위치가 이동된다.  build 디렉토리 안에는 빌드를 수행하기 위한 몇 가지 환경설정 파일이 있고, Build 과정에서 나오는 여러 산출물들도 이 디렉토리 안에  생성된다. 

이 상태 그대로 빌드를 수행해도 빌드는 가능하지만, 이렇게 되면 Default 환경인 QEMU 기반 이미지가 생성된다. 따라서 우리는 두 가지 설정을 추가로 해 주어야 한다.

1. Target 을 Beaglebone Black으로 설정
2. Build 시 meta-ti Layer를 포함하도록 설정

위 1번 항목은 Build 명령어 수행 시 MACHINE 환경변수를 설정함으로써 설정 가능하다. 2번 항목은 다음과 같이 build/conf/bblayers.conf 파일을 수정함으로써 설정 가능하다

```bash
$ cd $HOME/yocto-labs/build
$ vi conf/bblayers.conf
```
다음은 추가 전 bblayers.conf 파일의 기본 내용물이다. 경로는 자신의 컴퓨터 환경에 따라 다를 수 있다. 
```bash
# POKY_BBLAYERS_CONF_VERSION is increased each time build/conf/bblayers.conf
# changes incompatibly
POKY_BBLAYERS_CONF_VERSION = "2"

BBPATH = "${TOPDIR}"
BBFILES ?= ""

BBLAYERS ?= " \
  /media/hcyang/work/work/bbb/yocto-labs/poky/meta \
  /media/hcyang/work/work/bbb/yocto-labs/poky/meta-poky \
  "
```

위 내용과 같은 bblayers.conf 파일의 뒷부분에 다음과 같이 meta-ti Layer의 경로를 추가해주자. **반드시 절대 경로를 적어주어야 한다.** 

다음은 추가 할 내용이다.
```bash
/media/hcyang/work/work/bbb/yocto-labs/meta-ti \
```

다음은 위 문장을 추가한 결과이다. 

``` bash
# POKY_BBLAYERS_CONF_VERSION is increased each time build/conf/bblayers.conf
# changes incompatibly
POKY_BBLAYERS_CONF_VERSION = "2"

BBPATH = "${TOPDIR}"
BBFILES ?= ""

BBLAYERS ?= " \
  /media/hcyang/work/work/bbb/yocto-labs/poky/meta \
  /media/hcyang/work/work/bbb/yocto-labs/poky/meta-poky \
  /media/hcyang/work/work/bbb/yocto-labs/meta-ti \
  "
```

편집은 끝났다. 다음과 같은 명령으로 빌드를 진행해 보자.

```bash
$ cd $HOME/yocto-labs/build
$ MACHINE=beaglebone bitbake core-image-minimal
```
*bitbake core-image-minimal* 명령이 실제 이미지를 생성하는 명령이다. 다만 Beaglebone Black 용 이미지를 만들기 위해 앞에 *MACHINE=beaglebone* 과 같은 환경변수를 지정해 주었다. MACHINE 환경변수는  *build/conf/bblayers.conf* 파일에서도 지정이 가능하다. 

위 명령을 실행하고 나면 한참 동안 빌드한 후 빌드 이미지가 생성된다. 다음과 같은 명령으로 확인해 보자.

```bash
$ cd $BUILDDIR/tmp/deploy/images/beaglebone/
```

## Set up the  SD card
빌드 된 이미지를 이제 SD 카드에 복사한 후 부팅시켜 보자.  비글본 블랙에 기본 탑재되어 있는 U-Boot는 SD 카드의 Boot 파티션에서 커널 및 디바이스 트리를 읽어와 부팅하는 기능을 가지고 있기 때문에 이 기능을 활용하여 만들어진 이미지를 부팅시킬 것이다.

### Partitioning the SD Card
먼저, 부팅시킬 SD카드에 boot 파티션과 rootfs 파티션을 만들어야 한다. boot 파티션은 리눅스 커널 이미지 및 사용할 디바이스 트리를 저장하기 위한 파티션이고, rootfs 파티션은 리눅스커널이 부팅 후 로드할  rootfs 가 구성되어 있는 파티션이다. 

직접 파티션을 작성해도 무방하지만, 여기서는 앞서 다운받아 놓은 스크립트를 다음과 같이 이용하여 SD카드 파티션을 구성하겠다.

먼저 SD카드를 호스트 컴퓨터에 인식시키고, 다음 스크립트를 실행시키자. 단, 여기서는 SD카드가 /dev/sdc로 인식되었다고 가정하겠다.

```bash
$ cd $HOME/yocto-labs/bootlin-lab-data/script/
$ umount /dev/sdc*
$ sudo ./format_sdcard.sh /dev/sdc
```

스크립트를 실행시킨 후 SD카드를 다시 인식시키면 boot 파티션과 rootfs 파티션이 인식될 것이다. 대부분의 리눅스 배포판은 /media/$USER/boot 및 /media/$USER/rootfs 디렉토리에 자동으로 파티션을 인식시킬 것이다. 안 되었다면 마운트 시키자.

마운트가 정상적으로 되었다면 부팅용 이미지와 rootfs를 다음과 같은 명령으로 각 파티션에 복사하자. 

```bash
# boot 파티션에 부팅에 필요한 이미지 복사
$ cp $BUILDDIR/tmp/deploy/images/beaglebone/{MLO,u-boot.img,zImage} /media/$USER/boot
$ cp $BUILDDIR/tmp/deploy/images/beaglebone zImage-am335x-boneblack.dtb /media/$USER/boot/dtb
```

``` bash
# rootfs 파티션에 rootfs 파일들 복사
$ sudo tar xpf $BUILDDIR/tmp/deploy/images/beaglebone/core-image-minimal-beaglebone.tar.xz -C /media/$USER/rootfs
$ sync
```

## 시리얼 통신 환경 구축

만들어진 SD카드로 부팅하기 위해서는 Beaglebone Black에 기본 탑재되어 있는 U-Boot가 SD 카드에 있는 이미지로 리눅스를 부팅시키도록 U-Boot 환경 변수를 고쳐줘야 한다.  이를 위해서는 U-Boot의 UART 시리얼 콘솔로 접속할 수 있어야 한다. 

[이 링크](https://www.dummies.com/computers/beaglebone/how-to-connect-the-beaglebone-black-via-serial-over-usb/) 에 Beaglebone Black과 USB-TTL 시리얼 케이블의 연결이 자세히 나타나 있다. 

!["dominating_sets_example2"](https://www.dummies.com/wp-content/uploads/466809.image1.jpg)

*Fig. 1: Beaglebone Black UART 연결(출처 : Rui Santos, Luis Miguel Costa Perestrelo, How to Connect the BeagleBone Black via Serial over USB,https://www.dummies.com/ [Link](https://www.dummies.com/computers/beaglebone/how-to-connect-the-beaglebone-black-via-serial-over-usb/)*)

핀 연결 구성은 다음과 같다. 

- PIN1 (Black) : Ground
- PIN4 (Green) : Rx (To BBB)
- PIN5 (White) : Tx (From BBB)

연결하였으면 편한 시리얼 터미널로 115200bps 의 속도로 접속한 뒤, SD카드를 넣고 전원을 인가하자.

전원을 인가하면 다음과 같은 화면이 시리얼 터미널에 나타난다.

```bash
U-Boot SPL 2018.09-dirty (Mar 01 2019 - 15:27:46 +0900)
Trying to boot from MMC2
Loading Environment from EXT4... 
** Unable to use mmc 0:1 for loading the env **


U-Boot 2018.09-dirty (Mar 01 2019 - 15:27:46 +0900)

CPU  : AM335X-GP rev 2.1
I2C:   ready
DRAM:  512 MiB
No match for driver 'omap_hsmmc'
No match for driver 'omap_hsmmc'
Some drivers were not found
Reset Source: Power-on reset has occurred.
RTC 32KCLK Source: External.
MMC:   OMAP SD/MMC: 0, OMAP SD/MMC: 1
Loading Environment from EXT4... 
** Unable to use mmc 0:1 for loading the env **
Board: BeagleBone Black
<ethaddr> not set. Validating first E-fuse MAC
BeagleBone Black:
BeagleBone: cape eeprom: i2c_probe: 0x54:
BeagleBone: cape eeprom: i2c_probe: 0x55:
BeagleBone: cape eeprom: i2c_probe: 0x56:
BeagleBone: cape eeprom: i2c_probe: 0x57:
Net:   eth0: MII MODE
cpsw, usb_ether
Press SPACE to abort autoboot in 2 seconds

```

맨 아래줄과 같이 U-Boot는 처음 실행 후 수 초 간 사용자의 입력을 기다린 후 부팅을 계속 진행하는데, 이 상태에서 카운트가 끝나기 전 SPACE 키를 누르면 다음과 같이 U-Boot 콘솔에 접속할 수 있게 된다.

```bash
U-Boot SPL 2018.09-dirty (Mar 01 2019 - 15:27:46 +0900)
Trying to boot from MMC2
Loading Environment from EXT4... 
** Unable to use mmc 0:1 for loading the env **


U-Boot 2018.09-dirty (Mar 01 2019 - 15:27:46 +0900)

CPU  : AM335X-GP rev 2.1
I2C:   ready
DRAM:  512 MiB
No match for driver 'omap_hsmmc'
No match for driver 'omap_hsmmc'
Some drivers were not found
Reset Source: Power-on reset has occurred.
RTC 32KCLK Source: External.
MMC:   OMAP SD/MMC: 0, OMAP SD/MMC: 1
Loading Environment from EXT4... 
** Unable to use mmc 0:1 for loading the env **
Board: BeagleBone Black
<ethaddr> not set. Validating first E-fuse MAC
BeagleBone Black:
BeagleBone: cape eeprom: i2c_probe: 0x54:
BeagleBone: cape eeprom: i2c_probe: 0x55:
BeagleBone: cape eeprom: i2c_probe: 0x56:
BeagleBone: cape eeprom: i2c_probe: 0x57:
Net:   eth0: MII MODE
cpsw, usb_ether
Press SPACE to abort autoboot in 2 seconds
=> # SPACE 키를 눌러 콘솔 접속에 성공하면 => 마크와 함께 쉘이 실행된다.
```

## 환경변수 설정
U-Boot 콘솔에 접속했으면 다음과 같은 환경변수를 설정 후 저장하자.

```bash
setenv bootcmd 'mmc rescan; fatload mmc 0 0x80200000 zImage; fatload mmc 0 0x82000000 dtb; bootz 0x80200000 - 0x82000000'
setenv bootargs 'console=ttyS0,115200 root=/dev/mmcblk0p2 rootwait rw'
saveenv
```
---
**참고**

현재 내가 가지고 있는 U-Boot에는 bootcmd 환경변수가 다음과 같이 설정되어 있었다.
```bash
=> env print bootcmd
bootcmd=if test ${boot_fit} -eq 1; then run update_to_fit; fi; run findfdt; run init_console; run envboot; run distro_bootcmd
```

bootargs 환경변수는 따로 저장되어 있지 않았다.

---

저장하였으면 boot 명령을 사용하거나 전원을 다시 인가하여 리눅스를 부팅시켜보자.

다음은 부팅 로그의 일부를 캡쳐한 내용이다.

```bash
U-Boot 2018.09-dirty (Mar 01 2019 - 15:27:46 +0900)

CPU  : AM335X-GP rev 2.1
I2C:   ready
DRAM:  512 MiB
No match for driver 'omap_hsmmc'
No match for driver 'omap_hsmmc'
Some drivers were not found
Reset Source: Power-on reset has occurred.
RTC 32KCLK Source: External.
MMC:   OMAP SD/MMC: 0, OMAP SD/MMC: 1
Loading Environment from EXT4... 
** Unable to use mmc 0:1 for loading the env **
Board: BeagleBone Black
<ethaddr> not set. Validating first E-fuse MAC
BeagleBone Black:
BeagleBone: cape eeprom: i2c_probe: 0x54:
BeagleBone: cape eeprom: i2c_probe: 0x55:
BeagleBone: cape eeprom: i2c_probe: 0x56:
BeagleBone: cape eeprom: i2c_probe: 0x57:
Net:   eth0: MII MODE
cpsw, usb_ether
Press SPACE to abort autoboot in 2 seconds
=> setenv bootcmd 'mmc rescan; fatload mmc 0 0x80200000 zImage; fatload mmc 0 0x82000000 dtb; bootz 0x80200000 - 0x82000000'
=> setenv bootargs 'console=ttyS0,115200 root=/dev/mmcblk0p2 rootwait rw'
=> env print bootcmd
bootcmd=mmc rescan; fatload mmc 0 0x80200000 zImage; fatload mmc 0 0x82000000 dtb; bootz 0x80200000 - 0x82000000
=> env print bootargs
bootargs=console=ttyS0,115200 root=/dev/mmcblk0p2 rootwait rw
=> boot
3998208 bytes read in 256 ms (14.9 MiB/s)
36841 bytes read in 10 ms (3.5 MiB/s)
## Flattened Device Tree blob at 82000000
   Booting using the fdt blob at 0x82000000
   Loading Device Tree to 8fff4000, end 8fffffe8 ... OK

Starting kernel ...

[    0.000000] Booting Linux on physical CPU 0x0
[    0.000000] Linux version 4.14.54-g0b59bc3be7 (oe-user@oe-host) (gcc version 7.3.0 (GCC)) #1 PREEMPT Mon Aug 26 16:53:37 UTC 2019
[    0.000000] CPU: ARMv7 Processor [413fc082] revision 2 (ARMv7), cr=10c5387d
[    0.000000] CPU: PIPT / VIPT nonaliasing data cache, VIPT aliasing instruction cache
[    0.000000] OF: fdt: Machine model: TI AM335x BeagleBone Black
[    0.000000] Memory policy: Data cache writeback
[    0.000000] efi: Getting EFI parameters from FDT:
[    0.000000] efi: UEFI not found.
[    0.000000] cma: Reserved 48 MiB at 0x9d000000
[    0.000000] CPU: All CPU(s) started in SVC mode.
[    0.000000] AM335X ES2.1 (sgx neon)
[    0.000000] Built 1 zonelists, mobility grouping on.  Total pages: 129920
[    0.000000] Kernel command line: console=ttyS0,115200 root=/dev/mmcblk0p2 rootwait rw

# 중간 생략
...


Poky (Yocto Project Reference Distro) 2.5 beaglebone /dev/ttyS0

beaglebone login: root
root@beaglebone:~# 

```

마지막 라인과 같이 root ID로 접속이 가능하다.

## 정리

본 문서에서는 Yocto 기반 BSP를 구성하여 빌드해 보고, 이를 Beaglebone Black에 올려 부팅시켜보는 방법을 알아보았다. 
이를 위해 Yocto(+Poky) 를 다운로드 받았고, 여기에 meta-ti Layer를 추가하여 Beaglebone Black 용 커널도 빌드 이미지에 포함되도록 하였다.

또한 U-Boot의 환경변수를 설정하여 SD카드의 boot파티션에서 리눅스 커널 및 디바이스 트리 이미지를 읽어서 부팅할 수 있도록 해 보았다. 이렇게 하면 복잡한 파티션 설정 없이 비교적 간단하게 만들어진 이미지를 테스트 해 볼 수 있다.

다음은 이미 존재하는 Layer에 간단한 어플리케이션을 포함시켜 볼 계획이다.